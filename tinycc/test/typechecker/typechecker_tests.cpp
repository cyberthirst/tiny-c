//
// Created by Mirek Å krabal on 17.06.2023.
//
#include "typechecker_tests.h"

std::vector<Test> typechecker_tests = {
    TEST("int main() { return 1; }", 1),
    TEST("int main() { int i = 1; return i; }", 1),
    TEST("int main() { int i; return i; }", 0),
    TEST("int bar(int i) { return i; } int main() { return bar(5); }", 5),
    TEST("void main() { int a; }"),
    TEST("int main() { return 1; }"),
    TEST("void main() { return; }"),
    TEST("int main() { int a; return a; }"),
    TEST("double main() { double a; return a; }"),
    TEST("int main() { if (1) return 1; else return 2; }"),
    TEST("void main() { int a; a = 7; }"),
    TEST("int main(int a) { return a; }"),
    TEST("int a = 56; int main() { return a; }"),
    TEST("double b = 6.7; int main() { int a = 1; return a; }"),

    ERROR("void main() { return 1; }", TypeError),
    ERROR("int main() { if (1) return 1; else return 2.0; }", TypeError),
    ERROR("void main() { int a; a = 7.3; }", TypeError),
    ERROR("void main() { a = 5; }", TypeError),
    ERROR("void* main() { int a; return & a; }", TypeError),
    ERROR("int foo(int a, int b) { return a; } int main() { return foo(1, 'a'); }", TypeError),
    ERROR("int foo(int a, int b) { return a; } int main() { return foo(1); }", TypeError),
    ERROR("int foo(int a, int b) { return a; } int main() { return bar(1, 2); }", TypeError),
    ERROR("struct Foo; void main(Foo x) {}", TypeError),
    ERROR("struct Foo; struct Foo { int i; }; struct Foo { int i; }; void main(Foo x) {}", TypeError),
    ERROR("struct Foo {}; Foo main(Foo argc) { return argc++; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo argc) { return ++argc; }", TypeError),
    ERROR("void main() { 5 = 6; }", TypeError),
    ERROR("void main(int a) { & a = 678; }", TypeError),
    ERROR("int main() {}", TypeError),
    ERROR("int main(int a) { if (a) { return 1; }}", TypeError),
    ERROR("int main(int a) { while (a < 10) { return 1; }}", TypeError),
// Assigning a float to an int variable is a type error
    ERROR("int main() { int a = 2.5; return a; }", TypeError),
// Assigning a char to an int variable is a type error
    ERROR("int main() { int a = 'a'; return a + 5; }", TypeError),
    ERROR("void main() { print(67); }", TypeError),
    ERROR("typedef int (*func_ptr_t)(int); int foo(int x, int y) { return x + y; } int main() { func_ptr_t ptr = foo; return 0; }",
          TypeError),
    ERROR("typedef int (*func_ptr_t)(int); int main() { func_ptr_t ptr = 42; return 0; }", TypeError),
    ERROR("typedef int (*func_ptr_t)(int); int foo(int x) { return x + 1; } int main() { func_ptr_t ptr = foo; return ptr(5, 6); }",
          TypeError),
    ERROR("typedef int (*func_ptr_t)(int); int foo(int x) { return x + 1; } int main() { func_ptr_t ptr = foo; return ptr(5.5); }",
          TypeError),
    ERROR("struct Point { int x; int y; int x; }; int main() { return 0; }", TypeError),
    ERROR("struct Point { int x; int y; }; int main() { struct Point p; p.z = 5; return 0; }", TypeError),
    ERROR("struct Point { int x; int y; }; int main() { struct Point p; p.x = 5; p.y = 6.5; return 0; }",
          TypeError),
    ERROR("struct Point; int main() { struct Point p; p.x = 5; p.y = 6; return p.x + p.y; }", TypeError),
    ERROR("int main() { struct UndefinedPoint p; p.x = 5; p.y = 6; return p.x + p.y; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return +i; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return -i; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return ~i; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return !i; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return ++i; }", TypeError),
    ERROR("struct Foo {}; Foo main(Foo i) { return --i; }", TypeError),
};
